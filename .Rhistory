#status_code = status_code,
#artist = artist_name,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
library(testthat)
current_dir <- getwd()
print(current_dir)
relative_path <- file.path(current_dir, "Labex2_Q1_210401051_ozun_elif.R")
source(relative_path)
install.packages("httr")
source(relative_path)
install.packages("httr")
# Test 2.1
test_that("Global Workspace should have 'spotify_search_artist' variable", {
expect_true(exists("spotify_search_artist", envir = .GlobalEnv))
})
# Test 2.2
test_that("Type of 'spotify_search_artist' should be a function", {
expect_equal(typeof(spotify_search_artist), "closure")
})
# Test 2.3
test_that("Calling spotify_search_artist with any artist name should return a list", {
result <- spotify_search_artist("Shakira")
expect_true(is.list(result))
})
# Test 2.4
test_that("Calling spotify_search_artist should return a list with two elements", {
result <- spotify_search_artist("Shakira")
expect_equal(length(result), 2)
})
# Test 2.5
test_that("First element name of the result should be 'status_code'", {
result <- spotify_search_artist("Shakira")
expect_equal(names(result)[1], "status_code")
})
# Test 2.1: Global Workspace’de spotify_search_artist adlı bir değişken olmalı.
test_that("Global Workspace’de spotify_search_artist adlı bir değişken olmalı.", {
expect_exists("spotify_search_artist")
})
install.packages("httr")
install.packages("httr")
library(httr)
# SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlamak için
Sys.setenv(SPOTIFY_ID = "3c9b630783f2432bb3241a41ad7c2a3d")
Sys.setenv(SPOTIFY_SECRET = "520afcd7623146fb9d44116fc1d3ae12")
# Ardından, fonksiyonu çağırabilirsiniz
library(httr)
spotify_token <- function() {
# Spotify API token alma URL
token_url <- "https://accounts.spotify.com/api/token"
# Spotify uygulama bilgileri environment variable'lardan alınıyor
client_id <- Sys.getenv("SPOTIFY_ID")
client_secret <- Sys.getenv("SPOTIFY_SECRET")
if (client_id == "" || client_secret == "") {
stop("SPOTIFY_ID ve SPOTIFY_SECRET environment variable'larını ayarlayın.")
}
# Token alma isteği için body
body <- list(
grant_type = "client_credentials",
client_id = client_id,
client_secret = client_secret
)
# Token alma isteği gönderme
response <- POST(
url = token_url,
body = body,
encode = "form",
add_headers("Content-Type" = "application/x-www-form-urlencoded")
)
# HTTP status code'u alma
status_code <- status_code(response)
# Token değerini alma
token <- content(response)$access_token
# Bearer token stringini oluşturma
bearer_token <- paste("Bearer", token)
# Sonuçları liste olarak döndürme
result <- list(
status_code = status_code,
token = bearer_token
)
return(result)
}
# Kullanım örneği
token_result <- spotify_token()
print(token_result)
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
#status_code = status_code,
#artist = artist_name,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
# Test 2.1: Global Workspace’de spotify_search_artist adlı bir değişken olmalı.
test_that("Global Workspace’de spotify_search_artist adlı bir değişken olmalı.", {
expect_exists("spotify_search_artist")
})
install.packages("httr")
install.packages("httr")
library("httr")
current_dir <- getwd()
print(current_dir)
relative_path <- file.path(current_dir, "Labex2_Q1_210401051_ozun_elif.R")
source(relative_path)
install.packages("httr")
# Test 2.1: Global Workspace’de spotify_search_artist adlı bir değişken olmalı.
test_that("Global Workspace’de spotify_search_artist adlı bir değişken olmalı.", {
expect_exists("spotify_search_artist")
})
# Test 2.1
test_that("Global Workspace’de spotify_search_artist adlı bir değişken olmalı.", {
expect_true(exists("spotify_search_artist"))
})
# Test 2.2: spotify_search_artist adlı değişkenin tipi “function” olmalı.
test_that("spotify_search_artist adlı değişkenin tipi 'function' olmalı.", {
expect_is(spotify_search_artist, "function")
})
# Test 2.3: spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı.
test_that("spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_is(result, "list")
})
# Test 2.4: spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_length(result, 2)
})
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
#status_code = status_code,
artist = artist_name,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
# Test 2.4: spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_length(result, 2)
})
# Test 2.5: spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "status_code")
})
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
status_code = status_code,
#artist = artist_name,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
# Test 2.5: spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "status_code")
})
print(spotify_search_artist("The Doors"))
result <- list(
status_code = status_code,
search_results = search_results
)
return(result)
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
status_code = status_code,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
status_code = status_code,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
# Test 2.5: spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "status_code")
})
# Test 2.5
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result$status_code, "status_code")
})
# Test 2.5
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, c("status_code", "search_results"))
})
# Test 2.6: spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin class’ı numeric olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin class’ı numeric olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_equal(class(result$status_code), "numeric", info = "2.6 testi")
})
# Test 2.6
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin class’ı numeric olmalı", {
result <- spotify_search_artist("Random Artist")
expect_true(is.numeric(result$status_code))
})
# Test 2.7: spotify_search_artist() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200’e eşit olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200’e eşit olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_equal(result$status_code, 200)
})
# Test 2.8: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "search_results")
})
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "search_results")
})
#Özellik 2:
spotify_search_artist <- function(artist_name) {
if (!is.character(artist_name)) stop("Artist name must be character type.")
token <- spotify_token()
search_url <- paste0(
"https://api.spotify.com/v1/search?q=", URLencode(artist_name),
"&type=artist&limit=", 5
)
response <- httr::GET(
url = search_url,
add_headers("Authorization" = token[[2]])
)
search_result <- httr::content(response, type = "application/json")
status_code <- status_code(response)
# İlk num_results sanatçısını al
artists <- search_result$artists$items[seq_len(5)]
search_results <- data.frame(
artist = sapply(artists, function(x) x$name),
id = sapply(artists, function(x) x$id)
)
result <- list(
status_code = status_code,
search_results = search_results
)
return(result)
}
print(spotify_search_artist("The Doors"))
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "search_results")
})
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("Random Artist")
expect_named(result, "search_results")
})
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("Random Artist")
expect_named(result[[2]], "search_results")
})
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("The Doors")
expect_named(result, c("status_code", "search_results"))
})
# Test 2.9: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı
result <- spotify_search_artist("Random Artist")
expect_is(result$search_results, "data.frame")
# Test 2.9: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı
result <- spotify_search_artist("Random Artist")
expect_is(result$search_results, "data.frame")
}
# Test 2.9: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı."), {
# Test 2.9: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_is(result$search_results, "data.frame")
}
)
# Test 2.10
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin iki sütun barındırmalı", {
result <- spotify_search_artist("Random Artist")
expect_length(names(result$search_results), 2)
})
# Test 2.11
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin sütun isimleri c('artist', 'id') olmalı", {
result <- spotify_search_artist("Random Artist")
expect_equal(names(result$search_results), c("artist", "id"))
})
# Test 2.11
test_that("spotify_search_artist('The Doors') çağrıldığında döndürdüğü listenin ikinci elementinin birinci satırının 'id' adlı sütunu '22WZ7M8sxp5THdruNY3gXt' olmalı", {
result <- spotify_search_artist("The Doors")
expect_equal(result$search_results[1, "id"], "22WZ7M8sxp5THdruNY3gXt")
})
#Test 1.1)
library(testthat)
testthat::test_that("Global Workspace'te spotify_token adlı bir değişken olmalı", {
expect_true(exists("spotify_token", envir = .GlobalEnv))
})
#Test 1.2)
testthat::test_that("spotify_token adlı değişkenin tipi 'function' olmalı", {
expect_true(is.function(spotify_token))
})
#Test 1.3)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü çıktı bir liste olmalı", {
result <- spotify_token()
expect_true(is.list(result))
})
#Test 1.4)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin iki elementi olmalı", {
result <- spotify_token()
expect_length(result, 2)
})
#Test 1.5)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı", {
result <- spotify_token()
expect_true("status_code" %in% names(result))
})
#Test 1.6)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ilk elementinin class'ı numeric olmalı", {
result <- spotify_token()
expect_true(is.numeric(result$status_code))
})
#Test 1.7)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200'e eşit olmalı", {
result <- spotify_token()
expect_equal(result$status_code, 200)
})
#Test 1.8)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ikinci elementinin ismi token olmalı", {
result <- spotify_token()
expect_true("token" %in% names(result))
})
#Test 1.9)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ikinci elementinin class'ı character olmalı", {
result <- spotify_token()
expect_true(is.character(result$token))
})
#Test 1.10)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ikinci elementi 'Bearer ' ile başlamalı", {
result <- spotify_token()
expect_true(startsWith(result$token, "Bearer "))
})
#Test 1.11)
testthat::test_that("spotify_token() çağrıldığında döndürdüğü listenin ikinci elementi character değişkeninin içinde 122 adet harf bulunmalı", {
result <- spotify_token()
expect_length(strsplit(result$token, "")[[1]], 122)
})
library(testthat)
current_dir <- getwd()
print(current_dir)
relative_path <- file.path(current_dir, "Labex2_Q1_210401051_ozun_elif.R")
source(relative_path)
# Test 2.1
test_that("Global Workspace’de spotify_search_artist adlı bir değişken olmalı.", {
expect_true(exists("spotify_search_artist"))
})
# Test 2.2: spotify_search_artist adlı değişkenin tipi “function” olmalı.
test_that("spotify_search_artist adlı değişkenin tipi 'function' olmalı.", {
expect_is(spotify_search_artist, "function")
})
# Test 2.3: spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı.
test_that("spotify_search_artist() herhangi bir artist ismi ile çağrıldığında döndürdüğü çıktı bir liste olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_is(result, "list")
})
# Test 2.4: spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin iki elementi olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_length(result, 2)
})
# Test 2.5
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin ismi status_code olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_named(result, c("status_code", "search_results"))
})
# Test 2.6
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ilk elementinin class’ı numeric olmalı", {
result <- spotify_search_artist("Random Artist")
expect_true(is.numeric(result$status_code))
})
# Test 2.7: spotify_search_artist() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200’e eşit olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin status_code adlı elementinin değeri 200’e eşit olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_equal(result$status_code, 200)
})
# Test 2.8
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin ismi search_results olmalı", {
result <- spotify_search_artist("The Doors")
expect_named(result, c("status_code", "search_results"))
})
# Test 2.9: spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin class’ı data.frame olmalı.", {
result <- spotify_search_artist("Random Artist")
expect_is(result$search_results, "data.frame")
}
)
# Test 2.10
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin iki sütun barındırmalı", {
result <- spotify_search_artist("Random Artist")
expect_length(names(result$search_results), 2)
})
# Test 2.11
test_that("spotify_search_artist() çağrıldığında döndürdüğü listenin ikinci elementinin sütun isimleri c('artist', 'id') olmalı", {
result <- spotify_search_artist("Random Artist")
expect_equal(names(result$search_results), c("artist", "id"))
})
# Test 2.11
test_that("spotify_search_artist('The Doors') çağrıldığında döndürdüğü listenin ikinci elementinin birinci satırının 'id' adlı sütunu '22WZ7M8sxp5THdruNY3gXt' olmalı", {
result <- spotify_search_artist("The Doors")
expect_equal(result$search_results[1, "id"], "22WZ7M8sxp5THdruNY3gXt")
})
install.packages("httr")
